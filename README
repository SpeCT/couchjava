couchdb-java-viewserver is a java language view server for couchdb.

To compile:

1) Do "ant server.jar"
2) This creates a runnable jar file in the dist directory, dist/couchdb-java-viewserver.jar.

Get the patch couchdb and compile:

https://gist.github.com/aed82822749223b6dd1d

To attach to couchdb:

1) Add the following lines to your couchdb local.ini file:

[native_query_servers]
java = {showroom_ejje_server, start_link, ['ejje@localhost', "com.cloudant.couchdbjavaserver.JavaViewServer"]}

2) Start the JVM 'node' with the view server code

$ java -cp ./dist/couchdb-java-viewserver.jar com.cloudant.ejje.Ejje ejje@localhost cookiename

Where you may need to modify the path of the jar, and the name/cookie for the node.  Be sure to match the node name 'ejje@localhost' in both .ini and launch command.


Implementing a view:

There is an example view is com/cloudant/javaviews/SplitText.java

A view can be created by creating a java class that implements the methods of the com.cloudant.couchdbjavaserver.JavaView interface.

Once you have your class, make it into a jar archive (being sure to include any needed non-standard libaries).

To compile, do "ant views.jar".  This will create a jar archive dist/javaviews.jar.

You now need to load the view into couch db.  For this example, my database is named "wikipedia".  The design document looks like:

{
    "_id":"_design/splittext",
    "language":"java",
    "views" :
	{
	"title" : {"map":"{\"classname\":\"com.cloudant.javaviews.SplitText\",\"configure\":\"title\"}","reduce":"com.cloudant.javaviews.SplitText"},
	"text" : {"map":"{\"classname\":\"com.cloudant.javaviews.SplitText\",\"configure\":\"text\"}","reduce":"com.cloudant.javaviews.SplitText"}
	}
}

Note that you need to pass a single variable to "map", the full class name of your JavaView implmentation.  The "configure" field is optional and allows you to configure your class at run time.  Upload this file (which I have saved on disk as splittext.json):

curl -X PUT http://localhost:5984/wikipedia/_design/splittext -d @splittext.json

Now you need to grab the revision id (using GET) in order to attach the jar file that contains your class:

curl -X PUT http://localhost:5984/wikipedia/_design/splittext/javaviews.jar?rev=1-d58671fd0844f4466f498f22575ec308 --data-binary @javaviews.jar

You are done -- you can run your view like you normally would:

curl -X GET http://localhost:5984/wikipedia/_design/splittext/_view/text?key=\"an\"\&reduce=false

gets all documents with "an" in field "text".

curl -X GET http://localhost:5984/wikipedia/_design/splittext/_view/text?key=\"an\"

counts documents with "an" in field "text"
